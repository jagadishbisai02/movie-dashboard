{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jagad\\\\OneDrive\\\\Desktop\\\\website\\\\Assignment-1\\\\moviedb\\\\src\\\\components\\\\Movies\\\\movie.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useContext } from \"react\";\nimport { InfinitySpin } from \"react-loader-spinner\";\nimport MovieCard from \"../MovieCards/moviesCard\";\nimport MovieContext from \"../../context/context\";\nimport \"./movie.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Api_key = \"ae5f31e6a117648d9a5029a810f766e5\";\nconst apiStatusConstants = {\n  initial: \"INITIAL\",\n  inProgress: \"IN_PROGRESS\",\n  success: \"SUCCESS\",\n  failure: \"FAILURE\"\n};\nconst Movie = () => {\n  _s();\n  const movieSearch = useContext(MovieContext);\n  console.log(movieSearch.search, movieSearch.onChange, movieSearch.handle);\n  const [apiResponse, setApiResponse] = useState({\n    status: apiStatusConstants.initial,\n    movieList: null,\n    errorMsg: null\n  });\n  useEffect(() => {\n    const getMovies = async () => {\n      setApiResponse({\n        status: apiStatusConstants.inProgress,\n        movieList: null,\n        errorMsg: null\n      });\n      const apiUrl = `https://api.themoviedb.org/3/movie/popular?api_key=${Api_key}&language=en-US&query=&page=1`;\n      const option = {\n        method: \"GET\"\n      };\n      const response = await fetch(apiUrl, option);\n      const data = await response.json();\n      if (response.ok) {\n        setApiResponse(prev => ({\n          ...prev,\n          status: apiStatusConstants.success,\n          movieList: data.results\n        }));\n      } else {\n        setApiResponse(prev => ({\n          ...prev,\n          status: apiStatusConstants.success,\n          errorMsg: data.error_msg\n        }));\n      }\n    };\n    getMovies();\n  }, []);\n  const renderFailureView = () => {\n    const {\n      errorMsg\n    } = apiResponse;\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: errorMsg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 12\n    }, this);\n  };\n  const renderLoadingView = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loader-spinner-container\",\n    children: /*#__PURE__*/_jsxDEV(InfinitySpin, {\n      visible: true,\n      width: \"200\",\n      color: \"#4fa94d\",\n      ariaLabel: \"infinity-spin-loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n  const renderSuccess = () => {\n    const {\n      movieList\n    } = apiResponse;\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"movie-card-container\",\n      children: movieList.map(eachMovie => /*#__PURE__*/_jsxDEV(MovieCard, {\n        movie: eachMovie\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this);\n  };\n  const renderLeaderboard = () => {\n    const {\n      status\n    } = apiResponse;\n    switch (status) {\n      case apiStatusConstants.inProgress:\n        return renderLoadingView();\n      case apiStatusConstants.success:\n        return renderSuccess();\n      case apiStatusConstants.failure:\n        return renderFailureView();\n      default:\n        return null;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: renderLeaderboard()\n  }, void 0, false);\n};\n_s(Movie, \"U3t/91lFxNF1IV5WEeCUSUe4d88=\");\n_c = Movie;\nexport default Movie;\nvar _c;\n$RefreshReg$(_c, \"Movie\");","map":{"version":3,"names":["useState","useEffect","useContext","InfinitySpin","MovieCard","MovieContext","jsxDEV","_jsxDEV","Fragment","_Fragment","Api_key","apiStatusConstants","initial","inProgress","success","failure","Movie","_s","movieSearch","console","log","search","onChange","handle","apiResponse","setApiResponse","status","movieList","errorMsg","getMovies","apiUrl","option","method","response","fetch","data","json","ok","prev","results","error_msg","renderFailureView","children","fileName","_jsxFileName","lineNumber","columnNumber","renderLoadingView","className","visible","width","color","ariaLabel","renderSuccess","map","eachMovie","movie","renderLeaderboard","_c","$RefreshReg$"],"sources":["C:/Users/jagad/OneDrive/Desktop/website/Assignment-1/moviedb/src/components/Movies/movie.js"],"sourcesContent":["import { useState, useEffect, useContext } from \"react\";\r\nimport { InfinitySpin } from \"react-loader-spinner\";\r\nimport MovieCard from \"../MovieCards/moviesCard\";\r\nimport MovieContext from \"../../context/context\";\r\nimport \"./movie.css\";\r\n\r\nconst Api_key = \"ae5f31e6a117648d9a5029a810f766e5\";\r\n\r\nconst apiStatusConstants = {\r\n  initial: \"INITIAL\",\r\n  inProgress: \"IN_PROGRESS\",\r\n  success: \"SUCCESS\",\r\n  failure: \"FAILURE\",\r\n};\r\n\r\nconst Movie = () => {\r\n  const movieSearch = useContext(MovieContext);\r\n  console.log(movieSearch.search, movieSearch.onChange, movieSearch.handle);\r\n  const [apiResponse, setApiResponse] = useState({\r\n    status: apiStatusConstants.initial,\r\n    movieList: null,\r\n    errorMsg: null,\r\n  });\r\n\r\n  useEffect(() => {\r\n    const getMovies = async () => {\r\n      setApiResponse({\r\n        status: apiStatusConstants.inProgress,\r\n        movieList: null,\r\n        errorMsg: null,\r\n      });\r\n\r\n      const apiUrl = `https://api.themoviedb.org/3/movie/popular?api_key=${Api_key}&language=en-US&query=&page=1`;\r\n      const option = {\r\n        method: \"GET\",\r\n      };\r\n\r\n      const response = await fetch(apiUrl, option);\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        setApiResponse((prev) => ({\r\n          ...prev,\r\n          status: apiStatusConstants.success,\r\n          movieList: data.results,\r\n        }));\r\n      } else {\r\n        setApiResponse((prev) => ({\r\n          ...prev,\r\n          status: apiStatusConstants.success,\r\n          errorMsg: data.error_msg,\r\n        }));\r\n      }\r\n    };\r\n\r\n    getMovies();\r\n  }, []);\r\n\r\n  const renderFailureView = () => {\r\n    const { errorMsg } = apiResponse;\r\n    return <p>{errorMsg}</p>;\r\n  };\r\n\r\n  const renderLoadingView = () => (\r\n    <div className=\"loader-spinner-container\">\r\n      <InfinitySpin\r\n        visible={true}\r\n        width=\"200\"\r\n        color=\"#4fa94d\"\r\n        ariaLabel=\"infinity-spin-loading\"\r\n      />\r\n    </div>\r\n  );\r\n\r\n  const renderSuccess = () => {\r\n    const { movieList } = apiResponse;\r\n\r\n    return (\r\n      <ul className=\"movie-card-container\">\r\n        {movieList.map((eachMovie) => (\r\n          <MovieCard movie={eachMovie} />\r\n        ))}\r\n      </ul>\r\n    );\r\n  };\r\n\r\n  const renderLeaderboard = () => {\r\n    const { status } = apiResponse;\r\n\r\n    switch (status) {\r\n      case apiStatusConstants.inProgress:\r\n        return renderLoadingView();\r\n      case apiStatusConstants.success:\r\n        return renderSuccess();\r\n      case apiStatusConstants.failure:\r\n        return renderFailureView();\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  return <>{renderLeaderboard()}</>;\r\n};\r\n\r\nexport default Movie;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}