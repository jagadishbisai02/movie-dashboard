{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jagad\\\\OneDrive\\\\Desktop\\\\website\\\\Assignment-1\\\\moviedb\\\\src\\\\components\\\\Movies\\\\movie.js\";\nimport { useState, useEffect } from \"react\";\nimport { InfinitySpin } from \"react-loader-spinner\";\nimport MovieCard from \"../MovieCards/moviesCard\";\nimport \"./movie.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Api_key = \"ae5f31e6a117648d9a5029a810f766e5\";\nconst apiStatusConstants = {\n  initial: \"INITIAL\",\n  inProgress: \"IN_PROGRESS\",\n  success: \"SUCCESS\",\n  failure: \"FAILURE\"\n};\nconst Movie = props => {\n  var _s = $RefreshSig$();\n  return /*#__PURE__*/_jsxDEV(MovieContext.Consumer, {\n    children: _s(value => {\n      _s();\n      const {\n        search\n      } = value;\n      console.log(props);\n      const [apiResponse, setApiResponse] = useState({\n        status: apiStatusConstants.initial,\n        movieList: null,\n        errorMsg: null\n      });\n      useEffect(() => {\n        const getMovies = async () => {\n          setApiResponse({\n            status: apiStatusConstants.inProgress,\n            movieList: null,\n            errorMsg: null\n          });\n          const apiUrl = `https://api.themoviedb.org/3/movie/popular?api_key=${Api_key}&language=en-US&query=&page=1`;\n          const option = {\n            method: \"GET\"\n          };\n          const response = await fetch(apiUrl, option);\n          const data = await response.json();\n          if (response.ok) {\n            setApiResponse(prev => ({\n              ...prev,\n              status: apiStatusConstants.success,\n              movieList: data.results\n            }));\n          } else {\n            setApiResponse(prev => ({\n              ...prev,\n              status: apiStatusConstants.success,\n              errorMsg: data.error_msg\n            }));\n          }\n        };\n        getMovies();\n      }, []);\n      const renderFailureView = () => {\n        const {\n          errorMsg\n        } = apiResponse;\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: errorMsg\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 16\n        }, this);\n      };\n      const renderLoadingView = () => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loader-spinner-container\",\n        children: /*#__PURE__*/_jsxDEV(InfinitySpin, {\n          visible: true,\n          width: \"200\",\n          color: \"#4fa94d\",\n          ariaLabel: \"infinity-spin-loading\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this);\n      const renderSuccess = () => {\n        const {\n          movieList\n        } = apiResponse;\n        return /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"movie-card-container\",\n          children: movieList.map(eachMovie => /*#__PURE__*/_jsxDEV(MovieCard, {\n            movie: eachMovie\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this);\n      };\n      const renderLeaderboard = () => {\n        const {\n          status\n        } = apiResponse;\n        switch (status) {\n          case apiStatusConstants.inProgress:\n            return renderLoadingView();\n          case apiStatusConstants.success:\n            return renderSuccess();\n          case apiStatusConstants.failure:\n            return renderFailureView();\n          default:\n            return null;\n        }\n      };\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: renderLeaderboard()\n      }, void 0, false);\n    }, \"yo8Z9cLRXFArhc5ysmkbSC6xUBU=\")\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 3\n  }, this);\n};\n_c = Movie;\nexport default Movie;\nvar _c;\n$RefreshReg$(_c, \"Movie\");","map":{"version":3,"names":["useState","useEffect","InfinitySpin","MovieCard","jsxDEV","_jsxDEV","Fragment","_Fragment","Api_key","apiStatusConstants","initial","inProgress","success","failure","Movie","props","_s","$RefreshSig$","MovieContext","Consumer","children","value","search","console","log","apiResponse","setApiResponse","status","movieList","errorMsg","getMovies","apiUrl","option","method","response","fetch","data","json","ok","prev","results","error_msg","renderFailureView","fileName","_jsxFileName","lineNumber","columnNumber","renderLoadingView","className","visible","width","color","ariaLabel","renderSuccess","map","eachMovie","movie","renderLeaderboard","_c","$RefreshReg$"],"sources":["C:/Users/jagad/OneDrive/Desktop/website/Assignment-1/moviedb/src/components/Movies/movie.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { InfinitySpin } from \"react-loader-spinner\";\r\nimport MovieCard from \"../MovieCards/moviesCard\";\r\nimport \"./movie.css\";\r\n\r\nconst Api_key = \"ae5f31e6a117648d9a5029a810f766e5\";\r\n\r\nconst apiStatusConstants = {\r\n  initial: \"INITIAL\",\r\n  inProgress: \"IN_PROGRESS\",\r\n  success: \"SUCCESS\",\r\n  failure: \"FAILURE\",\r\n};\r\n\r\nconst Movie = (props) => (\r\n  <MovieContext.Consumer>\r\n    {(value) => {\r\n      const { search } = value;\r\n      console.log(props);\r\n      const [apiResponse, setApiResponse] = useState({\r\n        status: apiStatusConstants.initial,\r\n        movieList: null,\r\n        errorMsg: null,\r\n      });\r\n\r\n      useEffect(() => {\r\n        const getMovies = async () => {\r\n          setApiResponse({\r\n            status: apiStatusConstants.inProgress,\r\n            movieList: null,\r\n            errorMsg: null,\r\n          });\r\n\r\n          const apiUrl = `https://api.themoviedb.org/3/movie/popular?api_key=${Api_key}&language=en-US&query=&page=1`;\r\n          const option = {\r\n            method: \"GET\",\r\n          };\r\n\r\n          const response = await fetch(apiUrl, option);\r\n          const data = await response.json();\r\n\r\n          if (response.ok) {\r\n            setApiResponse((prev) => ({\r\n              ...prev,\r\n              status: apiStatusConstants.success,\r\n              movieList: data.results,\r\n            }));\r\n          } else {\r\n            setApiResponse((prev) => ({\r\n              ...prev,\r\n              status: apiStatusConstants.success,\r\n              errorMsg: data.error_msg,\r\n            }));\r\n          }\r\n        };\r\n\r\n        getMovies();\r\n      }, []);\r\n\r\n      const renderFailureView = () => {\r\n        const { errorMsg } = apiResponse;\r\n        return <p>{errorMsg}</p>;\r\n      };\r\n\r\n      const renderLoadingView = () => (\r\n        <div className=\"loader-spinner-container\">\r\n          <InfinitySpin\r\n            visible={true}\r\n            width=\"200\"\r\n            color=\"#4fa94d\"\r\n            ariaLabel=\"infinity-spin-loading\"\r\n          />\r\n        </div>\r\n      );\r\n\r\n      const renderSuccess = () => {\r\n        const { movieList } = apiResponse;\r\n\r\n        return (\r\n          <ul className=\"movie-card-container\">\r\n            {movieList.map((eachMovie) => (\r\n              <MovieCard movie={eachMovie} />\r\n            ))}\r\n          </ul>\r\n        );\r\n      };\r\n\r\n      const renderLeaderboard = () => {\r\n        const { status } = apiResponse;\r\n\r\n        switch (status) {\r\n          case apiStatusConstants.inProgress:\r\n            return renderLoadingView();\r\n          case apiStatusConstants.success:\r\n            return renderSuccess();\r\n          case apiStatusConstants.failure:\r\n            return renderFailureView();\r\n          default:\r\n            return null;\r\n        }\r\n      };\r\n\r\n      return <>{renderLeaderboard()}</>;\r\n    }}\r\n  </MovieContext.Consumer>\r\n);\r\n\r\nexport default Movie;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}